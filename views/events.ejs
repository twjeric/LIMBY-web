<!DOCTYPE html>
<html>
<head>
	<title>Events</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie-edge">
	<link rel='stylesheet' href='/stylesheets/style.css' />
	<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
	<!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"> -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
</head>
<body>
	<% if (err){ %>
		<script>
			toastr.warning(`<%=err%>`); 
		</script>
	<% } %>
	<div class="navbar">
		<a href="/">Home</a>
		<div class="profile dropdown">
			<img src="https://data.whicdn.com/images/45841608/original.jpg" class="avatar dropbtn">
			<div class="drop-content">
				<a href="/device">Device info</a>
				<a href="/logout">Log out</a>
			</div>
		</div>
	</div>	
  <div class="container">
	<canvas id="myChart"></canvas>
	<p id="LiveToggleText">Live Data: Off</p>
	<p id="TimeScaleText">Showing Weights: Past Hour</p>
  </div>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToHour()">Show Weight Past Hour</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToDay()">Show Weight Past Day</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToWeek()">Show Weight Past Week</button>
   <button type="button" class="btn btn-secondary btn-lg" onclick="ChangeTimeScaleToMonth()">Show Weight Past Month</button>
   
   <form>
     Show Weights from:
     <input type="date" id="startDate">
     to:
     <input type="date" id="endDate">
   </form>
   <button type="button" class="btn btn-default btn-lg" onclick="TimeScaleSearch()">Search</button>
   <p <br /></p>
   <button type="button" class="btn btn-primary btn-lg" onclick="ToggleLive()">Toggle Live Refresh</button>
   <button type="button" class="btn btn-primary btn-lg" onclick="CreateCSV();return false;">Download as csv</button>

  <script>
    var isRefreshingLive = false;
	
	const MS_IN_A_MINUTE = 60000;
	const MS_IN_AN_HOUR = 3600000;
	const MS_IN_A_DAY = 86400000;
	const MS_IN_A_WEEK = 604800000;
	const MS_IN_A_MONTH = 2628000000;
	
	const HOUR = "hour";
	const DAY = "day";
	const WEEK = "week";
	const MONTH = "month";
	const SEARCH = "search";
	const LIVE = "live";
	
	const AXES_BUFFER = 1000;
	
	const EPOCH_CORRECTION_MONTH = 1;
	const EPOCH_CORRECTION_YEAR = 1900;
	
    const MAX_DATA_POINTS = 0;
	
	// How often 'live refresh' refreshes
	const LIVE_REFRESH_RATE = 10000;
	var timeScale = HOUR;
    var dataLoop;
	
	var startUtc;
	var endUtc;
    // Data arrays
    /* displayedTimes and displayedWeights weights are hooked to the graph.
       Changing them will automatically show on the graph.
    */
    var displayedTimes = []; // Time at which weight was recorded
    var displayedWeights = []; // Recorded weights
	
	var csvTimes = [];
    // These are the buffers that will hold the perch data before they are displayed to the graph
    var rawTimes = [];
    var rawWeights = [];
		
	var windowMinimum;
	var windowMaximum;
    // Initialize data arrays
    for (i = 0; i < MAX_DATA_POINTS; i++)
    {
		displayedWeights.push(0);
		displayedTimes.push("");
		storedTimes.push(0);
		storedWeights.push("");
    }
   
    /* Chart Code
     *
     */
    let myChart = document.getElementById('myChart').getContext('2d');
    //Global options
    Chart.defaults.global.defaultFontFamily = 'Ariel';
    Chart.defaults.global.defaultFontSize = 18;
    var weightChart = new Chart(myChart, {
		// Graph Type
		type: 'line', // Types: bar, horizontalBar, pie, line, doughnut, radar, polarArea
		// Data Displayed
		data:{
			// x axis names
			labels:displayedTimes, // Array type
			datasets:[{
				label:'Weight',
				// y axis values for each x axis label
				data:displayedWeights,
				backgroundColor:'rgba(66, 134, 244, .3)', // Color of line data, light blue
				borderWidth:1, // Width of each weight node
				borderColor:'#777',
				hoverBorderWidth:3,
				hoverBorderColor:'#000'
			}]
		},
		// Graph Auxillary Options - title, legend, etc.
		options:{
			title:{
				display:true,
				text:'LIMBY Smart Perch',
				fontSize:25,
				fontFamily: "Courier New"
			},
			legend:{
				//position:'right',
				display:false,
				labels:{
					fontColor:'#000'
				}
			},
			scales: {
				xAxes: [{
					display: true,
					scaleLabel: {
						display: true,
						labelString: 'Time'
					},
					fontFamily: 'Courier New'
				}],
				yAxes: [{
					display: true,
					scaleLabel: {
						display: true,
						labelString: 'Weight in Grams'
					},
					fontFamily: 'Courier New',
					ticks: {
						scaleBeginAtZero: true,
						//steps: 40,
						stepSize: 1000,
						min: -60000,
						max: 60000
					}
				}]
			},
			layout:{
			}
        }
    });
	
    displayPastData(timeScale);
	/* Requests previous weight data from server.
	   1 Hour = 3,600,000 ms
	   1 Day = 86,400,000 ms
	   1 Week = 604,800,000 ms
	   1 Month = 2,628,000,000 ms
	*/ 	
	function displayPastData(scale)
	{    
		var difference;
		var windowScale;
	    switch(scale)
		{
		    case HOUR:
			    difference = MS_IN_AN_HOUR;
				break;
		    case DAY:
			    difference = MS_IN_A_DAY;
				break;
		    case WEEK:
			    difference = MS_IN_A_WEEK;
				windowScale = MS_IN_AN_HOUR;
				break;
			case MONTH:
			    difference = MS_IN_A_MONTH;
				windowScale = MS_IN_A_DAY / 2;
				break;
		}
		let nowTime = new Date();
		var nowMs = nowTime.getTime();
		var pastMs = nowMs - difference;
		
		if (scale == "search")
		{
			// Caps the end of the search range to now time
			if (endUtc < nowMs)
			{
				nowMs = endUtc;
			}
			
			pastMs = startUtc;
		}
		
		var xhttp = new XMLHttpRequest();
		var response;
		xhttp.open("GET", "/api/past/"+pastMs.toString()+ "/" +nowMs.toString(), true); //url?
		xhttp.send();
		xhttp.addEventListener("readystatechange", processRequest, false);
		function processRequest(e) 
		{
			displayedTimes.length = 0;
			csvTimes.length = 0;
			rawTimes.length = 0;
			displayedWeights.length = 0;
			rawWeights.length = 0;
			
			if (xhttp.readyState == 4 && xhttp.status == 200) 
			{
				response = JSON.parse(xhttp.responseText);				
				// response structure: _id, userid, time, value
				for (var r in response)
				{
					var amPm;
					
					// Time display
					var date = new Date(response[r].time);
					displayedDate = formattedTime(date, 'graph');
					csvDate = formattedTime(date, 'csv');
					
					displayedTimes.push(displayedDate);
					csvTimes.push(csvDate);
					rawTimes.push(response[r].time);
				   
					// Weight display
					displayedWeights.push(response[r].value);
					rawWeights.push(response[r].value);
				}			
			
				// Finds averages for Week and Month options
				if (scale == WEEK || scale == MONTH)
				{
					displayedWeights.length = 0;
					displayedTimes.length = 0;
					csvTimes.length = 0;
					
					var windowWeights = [];
					if (rawTimes.length > 0)
					{
					    var windowBeginTime = rawTimes[0];	
					}				
					var windowEndTime = windowBeginTime + windowScale;
					
					displayedTimes.push(formattedTime(windowBeginTime, 'graph'));
					csvTimes.push(formattedTime(windowBeginTime, 'csv'));
					
					if (rawWeights.length > 0)
					{
					    displayedWeights.push(rawWeights[0]);
					}
					
					for (i = 0; i < rawTimes.length; i++)
					{	
						if (rawTimes[i] >= windowBeginTime && rawTimes[i] <= windowEndTime &&
						    i != rawTimes.length - 1)
						{
							windowWeights.push(rawWeights[i]);
						}
						else
						{							
							windowBeginTime = rawTimes[i];
							windowEndTime = windowBeginTime + windowScale;
							
							displayedTimes.push(formattedTime(windowBeginTime, 'graph'));
							csvTimes.push(formattedTime(windowBeginTime, 'csv'));
							
							var sum = 0;
							for(j = 0; j < windowWeights.length; j++)
							{							
								sum += windowWeights[j];
							}
							var average = sum / windowWeights.length;
							average = Math.round(average);
							displayedWeights.push(average);
							
							windowWeights.length = 0;
						}
					}
				}
			}					
			
			// Changes graph scale depending on currently displayed data
			var nearestPowerOfTen = 
				Math.pow(10, Math.floor(Math.log10(
					Math.max(
						Math.max.apply(null, displayedWeights), 
						Math.abs(Math.min.apply(null, displayedWeights))))));
						
			weightChart.config.options.scales.yAxes[0].ticks.min = 
				Math.min(
					0,
				Math.round((Math.min.apply(null, displayedWeights) - nearestPowerOfTen)/nearestPowerOfTen)*nearestPowerOfTen);
			weightChart.config.options.scales.yAxes[0].ticks.max = 
			    Math.max(
					0,
					Math.round((Math.max.apply(null, displayedWeights) + nearestPowerOfTen)/nearestPowerOfTen)*nearestPowerOfTen);
				
			weightChart.config.options.scales.yAxes[0].ticks.stepSize = nearestPowerOfTen; 
	
			weightChart.update();
		}
	}
	
	
	// Takes a Date object and formats it for graph and csv output
	function formattedTime(dateValue, target) {
	    var date = new Date(dateValue);
		var year = date.getFullYear() + EPOCH_CORRECTION_YEAR;
		var month = date.getMonth() + EPOCH_CORRECTION_MONTH;
		var day = date.getDate();
		var hour = date.getHours();
		var minute = date.getMinutes(); 
		
		if (minute < 10)
		{
			minute = "0"+minute;
		}	
		
		var second = date.getSeconds();		
		if (second < 10)
		{
			second = "0"+second;
		}	
		
		if (hour == 12)
		{
			amPm = "PM";
		}
		else if (hour > 12)
		{
			hour = 12 - (24 - hour);
			amPm = "PM";
		}			   
		else if (hour == 0)
		{
			hour = 12;
			amPm = "AM";
		}
		else
		{
			amPm = "AM";
		}
		return (target == 'graph') ? 
			(month+"/"+day+"  "+hour+":"+minute+":"+second+amPm) :
			(month+"."+day+"."+year+", "+hour+":"+minute+":"+second+amPm)
	}
    // Live Toggle Button
    function ToggleLive()
    {
		isRefreshingLive = !isRefreshingLive;
		console.log(isRefreshingLive);
		// Changes Live Data text accordingly
		if(timeScale == SEARCH || timeScale == LIVE)
		{
			return;
		}
		if (isRefreshingLive == true)
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
			dataLoop = setInterval(function(){ displayPastData(timeScale); }, LIVE_REFRESH_RATE);
		}
		else
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
			clearInterval(dataLoop);
		}
    }
	
	// Changes Time Scale text to reflect current graph time scale
	function ChangeTimeScaleToHour()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights: Past Hour";
		if (isRefreshingLive == true && timeScale != SEARCH)
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
		}
		else
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
		}
	    timeScale = HOUR;
		displayPastData(timeScale);
	}
	function ChangeTimeScaleToDay()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights: Past Day";
	    if (isRefreshingLive == true && timeScale != SEARCH)
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
		}
		else
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
		}
		timeScale = DAY;
	    displayPastData(timeScale);
	}
	function ChangeTimeScaleToWeek()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights: Past Week (Averaged Every Hour)";
	    if (isRefreshingLive == true && timeScale != SEARCH)
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
		}
		else
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
		}
		timeScale = WEEK;
		displayPastData(timeScale);
	}
	function ChangeTimeScaleToMonth()
	{
		document.getElementById("TimeScaleText").innerHTML = "Showing Weights: Past Month (Averaged Every Half Day)";
	    if (isRefreshingLive == true && timeScale != SEARCH)
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: On";
		}
		else
		{
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Off";
		}
		timeScale = MONTH;
	    displayPastData(timeScale);
	}
	function TimeScaleSearch()
	{
	    var startDate = document.getElementById("startDate").value;
		var startObject = new Date(startDate);
		
        var endDate = document.getElementById("endDate").value;	    
		
		var startYear = startDate.substring(0,4);
		var startMonth = startDate.substring(5,7);
		var startDay = startDate.substring(8,10);
		
		var endYear = startDate.substring(0,4);
		var endMonth = startDate.substring(5,7);
		var endDay = startDate.substring(8,10);	
		
		startUtc = new Date(startDate).valueOf() + 
			(startObject.getTimezoneOffset() * MS_IN_A_MINUTE);
		endUtc = new Date(endDate).valueOf() + MS_IN_A_DAY + 
			(startObject.getTimezoneOffset() * MS_IN_A_MINUTE);
		
		//console.log(startUtc);
		
		if (startUtc > 0 && endUtc > 0)
		{
			timeScale = SEARCH;
			displayPastData(timeScale);
			
			document.getElementById("LiveToggleText").innerHTML = "Live Data: Not Available with Search";
			document.getElementById("TimeScaleText").innerHTML = "Showing Weights from " + startDate + " to " + endDate;
		}	
	}
	
	// Creates CSV from currently displayed time and weight data and prompts download on client
	function CreateCSV()
	{
		var csvRows = [];
		csvRows.push("Date, Time, Weight in Grams");
		
		// Combines times and weights
		for(var i = 0; i < csvTimes.length; ++i)
		{
			csvRows.push(csvTimes[i] + ", " + displayedWeights[i]);
		}		
		
		// Puts a new row after every vector element
		var csvString = Array.prototype.join.call(csvRows, "\n");
		csvRows.push(csvString);
		// Creates CSV and prompts download
		var a = document.createElement('a');
		a.href = 'data:attachment/csv,' +  encodeURIComponent(csvString);
		a.target = '_blank';
		a.download = 'birdWeights.csv';
		document.body.appendChild(a);
		a.click();
	}
  </script>
</body>
</html>